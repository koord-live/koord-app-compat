# This file builds the source and produces artifacts for every supported platform.
# For release tags it creates a Github release and uploads the binaries to that releases.
# The builds are instrumented with CodeQL.

# see analyse_git_reference.py for implementation of the logic:
#     for every push to a branch starting with "autobuild": (can be used during development for tighter supervision of builds)
#          - do CodeQl while building for every platform
#          - publish the created binaries/packs only as artifacts/appendix of the github-action-run (not as release), and only retain those files for limited period
#     for every pull-request to master:
#          - do CodeQl while building for every platform
#          - publish the created binaries/packs only as artifacts/appendix of the github-action-run (not as release), and only retain those files for limited period
#     for every tag that starts with 'r' and has an arbitrary suffix (e.g. beta1, rc1, etc.)
#          - do CodeQl while building for every platform
#          - publish the created binaries/packs only as artifacts/appendix as a prerelease
#     for every tag that starts with 'r' and does not have any suffix:
#          - do CodeQl while building for every platform
#          - publish the created binaries/packs only as artifacts/appendix as a release

on:
  workflow_dispatch:
  push:
    tags:
      - "r*"
    branches:
      # For developers: Branches starting with autobuild will be built and evaluated on each push.
      - "autobuild**"
      - "testgui2"
      # CodeQL requires every branch from on.pull_request to be part of on.push as well in order to run comparisons.
      # We also need master here to trigger builds on PR merge to master and manual pushes (e.g. as part of the release process):
      - "master"
    paths-ignore:
      - '**README.md'
      - 'docs/**'
      - 'SECURITY.md'
      - 'CONTRIBUTING.md'
      - 'COMPILING.md'
      - 'COPYING'
      - 'APPLEAPPSTORE.LICENCE.WAIVER'
      - '.github/ISSUE_TEMPLATE/*'
      - '.github/pull_request_template.md'
  pull_request:
    branches:
      - master
    paths-ignore:
      - '**README.md'
      - 'docs/**'
      - 'SECURITY.md'
      - 'CONTRIBUTING.md'
      - 'COMPILING.md'
      - 'COPYING'
      - 'APPLEAPPSTORE.LICENCE.WAIVER'
      - '.github/ISSUE_TEMPLATE/*'
      - '.github/pull_request_template.md'

name:                               Auto-Build
jobs:
  create_release:
    # Check if we are doing a release or just a normal build.
    # This must be done before actually building the app to find out where to upload the binaries and if we need to create a Github release.
    name:                           Build vars & Github release (if required)
    runs-on:                        ubuntu-20.04
    outputs:
      publish_to_release:           ${{ steps.get-build-vars.outputs.PUBLISH_TO_RELEASE }}
      upload_url:                   ${{ steps.create-release.outputs.upload_url }}
      build_version:                ${{ steps.get-build-vars.outputs.BUILD_VERSION }}

    steps:
      - name:                       Checkout code
        uses:                       actions/checkout@v2

      - name:                       Determine release version, type and prerelease variables and generate Changelog
        run:                        python3 ${{ github.workspace }}/.github/actions_scripts/analyse_git_reference.py
        id:                         get-build-vars

      - name:                       Remove release ${{steps.get-build-vars.outputs.RELEASE_TAG}}, if existing
        if:                         steps.get-build-vars.outputs.PUBLISH_TO_RELEASE == 'true'
        continue-on-error:          true
        uses:                       dev-drprasad/delete-tag-and-release@v0.1.2
        with:
          delete_release:           true
          tag_name:                 ${{ steps.get-build-vars.outputs.RELEASE_TAG }}
        env:
          GITHUB_TOKEN:             ${{ secrets.GITHUB_TOKEN }}

      - name:                       Create Release ${{steps.get-build-vars.outputs.RELEASE_TAG}}  ${{steps.get-build-vars.outputs.RELEASE_TITLE}}
        if:                         steps.get-build-vars.outputs.PUBLISH_TO_RELEASE == 'true'
        id:                         create-release
        uses:                       actions/create-release@v1
        env:
          GITHUB_TOKEN:             ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name:                 ${{ steps.get-build-vars.outputs.RELEASE_TAG }}
          release_name:             ${{ steps.get-build-vars.outputs.RELEASE_TITLE }}
          body_path:                autoLatestChangelog.md
          prerelease:               ${{ steps.get-build-vars.outputs.IS_PRERELEASE }}
          draft:                    false


  release_assets:
    name:                           Build for ${{ matrix.config.config_name }}
    needs:                          create_release
    strategy:
      fail-fast:                    false
      matrix:
        # Think of this like a foreach loop. Basically runs the steps with every combination of
        # the contents of this.
        config:
          - config_name:            Android 10+ armv7,arm64_v8a .aab
            target_os:              android
            building_on_os:         ubuntu-22.04
            base_command:           ./.github/autobuild/android.sh
            run_codeql:             false
            # Jamulus.pro needs to count git history length for android versioning:
            checkout_fetch_depth:   '0'

          # Qt6 requires Ubuntu 20.04+ for build, but apt packages only in 22.04+ 
          # Can install Qt using aqtinstall on 20.04 - thus needs glibc>=2.31 
          - config_name:            Linux 2.31+ x64 AppImage
            target_os:              linux
            building_on_os:         ubuntu-20.04
            base_command:           ./.github/autobuild/linux.sh
            run_codeql:             false

          ## Qt6 from apt - crossbuild for armhf eg rPi
          ## Disable for now: likely no Qt6 on rPi anyway. AppImage preferable
          # - config_name:            Linux .deb armhf (artifacts)
          #   target_os:              linux
          #   building_on_os:         ubuntu-22.04
          #   base_command:           TARGET_ARCH=armhf ./.github/autobuild/linux.sh
          #   run_codeql:             false

          ## Build disabled as XCode12 is fine as Qt6 build platform :) and gives us extra run target: 10.14 
          # - config_name:            MacOS 10.15+ (artifacts)
          #   target_os:              macos
          #   building_on_os:         macos-11
          #   base_command:           QT_VERSION=6.3.0 SIGN_IF_POSSIBLE=1 ./.github/autobuild/mac.sh
          #   # Disable CodeQL on mac as it interferes with signing the binaries (signing hangs, see #2563 and #2564)
          #   run_codeql:             false
          #   xcode_version:          13.2.1

          - config_name:            MacOS 10.14+ x64 pkg,dmg
            target_os:              macos
            # Build platform can be newer than target platform
            building_on_os:         macos-10.15
            base_command:           QT_VERSION=6.3.0 SIGN_IF_POSSIBLE=1 ./.github/autobuild/mac.sh
            run_codeql:             false
            # Target oldest macOS version supported by Qt6: 10.14 - so xcode 12 needed 
            # Xcode 12.1.1 is the most-recent release which still ships SDK 10.15:
            # https://developer.apple.com/support/xcode/ -  https://xcodereleases.com/
            xcode_version:          12.1.1

          - config_name:            iOS 10.13+ ipa
            target_os:              ios
            building_on_os:         macos-11
            base_command:           QT_VERSION=6.3.0 SIGN_IF_POSSIBLE=1 ./.github/autobuild/ios.sh
            # Build failed with CodeQL enabled when last tested 03/2022 (#2490).
            # There are no hints that iOS is supposed to be supported by CodeQL.
            # Therefore, disable it:
            run_codeql:             false
            xcode_version:          13.2.1

          - config_name:            Windows 10+ x64 exe
            target_os:              windows
            building_on_os:         windows-2022
            base_command:           powershell .\.github\autobuild\windows.ps1 -Stage
            run_codeql:             false

    runs-on:                        ${{ matrix.config.building_on_os }}
    steps:
      - name:                       Select Xcode version for Mac
        if:                         matrix.config.target_os == 'macos' || matrix.config.target_os == 'ios'
        uses:                       maxim-lobanov/setup-xcode@v1
        with:
          xcode-version:            ${{ matrix.config.xcode_version }}

      - name:                       Checkout code
        uses:                       actions/checkout@v2
        with:
          submodules:               true
          fetch-depth:              ${{ matrix.config.checkout_fetch_depth || '1' }}

      - name:                       Cache Mac dependencies
        if:                         matrix.config.target_os == 'macos'
        uses:                       actions/cache@v2
        with:
          path: |
            /usr/local/opt/qt
            ~/Library/Cache/jamulus-homebrew-bottles
          key:                      ${{ matrix.config.target_os }}-${{ hashFiles('.github/workflows/autobuild.yml', 'autobuild/mac/autobuild_mac_1_prepare.sh', 'mac/deploy_mac.sh') }}-${{ matrix.config.base_command }}

      - name:                       Cache Windows dependencies
        if:                         matrix.config.target_os == 'windows'
        uses:                       actions/cache@v2
        with:
          path: |
            C:\Qt
            C:\ChocoCache
            ~\windows\ASIOSDK2
          key:                      ${{ matrix.config.target_os }}-${{ hashFiles('.github/workflows/autobuild.yml', 'autobuild/windows.ps1', 'windows/deploy_windows.ps1') }}-${{ matrix.config.base_command }}

      - name:                       Cache Android dependencies
        if:                         matrix.config.target_os == 'android'
        uses:                       actions/cache@v2
        with:
          path: |
            /opt/Qt
            /opt/android/android-sdk
            /opt/android/android-ndk
          key:                      ${{ matrix.config.target_os }}-${{ hashFiles('.github/workflows/autobuild.yml', '.github/autobuild/android.sh') }}-${{ matrix.config.base_command }}

      - name:                       Set up build dependencies for ${{ matrix.config.config_name }}
        run:                        ${{ matrix.config.base_command }} setup
        env:
          JAMULUS_BUILD_VERSION:    ${{ needs.create_release.outputs.build_version }}

      - name:                       Initialize CodeQL
        if:                         matrix.config.run_codeql
        uses:                       github/codeql-action/init@v2
        with:
          languages: 'cpp'

      - name:                       Build for ${{ matrix.config.config_name }}
        id:                         build
        run:                        ${{ matrix.config.base_command }} build
        env:
          JAMULUS_BUILD_VERSION:    ${{ needs.create_release.outputs.build_version }}
          MAC_ADHOC_CERT:           ${{ secrets.MAC_ADHOC_CERT}}
          MAC_ADHOC_CERT_PWD:       ${{ secrets.MAC_ADHOC_CERT_PWD }}
          MAC_ADHOC_CERT_ID:        ${{ secrets.MAC_ADHOC_CERT_ID }}
          MAC_STORE_APP_CERT:       ${{ secrets.MACAPP_CERT}}
          MAC_STORE_APP_CERT_PWD:   ${{ secrets.MACAPP_CERT_PWD }}
          MAC_STORE_APP_CERT_ID:    ${{ secrets.MACAPP_CERT_ID }}
          MAC_STORE_INST_CERT:      ${{ secrets.MACAPP_INST_CERT}}
          MAC_STORE_INST_CERT_PWD:  ${{ secrets.MACAPP_INST_CERT_PWD }}
          MAC_STORE_INST_CERT_ID:   ${{ secrets.MACAPP_INST_CERT_ID }}
          IOSDIST_CERTIFICATE:      ${{ secrets.IOSDIST_CERT}}
          IOSDIST_CERTIFICATE_PWD:  ${{ secrets.IOSDIST_CERT_PWD }}
          IOSDIST_CERTIFICATE_ID:   ${{ secrets.IOSDIST_CERT_ID }}
          IOS_PROV_PROFILE_B64:     ${{ secrets.IOS_PROVISIONING_PROFILE }}
          GOOGLE_RELEASE_KEYSTORE:  ${{ secrets.GOOGLE_KEYSTORE }}
          GOOGLE_KEYSTORE_PASS:     ${{ secrets.GOOGLE_KEYSTORE_PASS }}
          NOTARIZATION_USERNAME:    ${{ secrets.NOTARIZATION_USERNAME }}
          NOTARIZATION_PASSWORD:    ${{ secrets.NOTARIZATION_PASSWORD }}
          KEYCHAIN_PASSWORD:        ${{ secrets.KEYCHAIN_PASSWORD }}

      - name:                       Post-Build for ${{ matrix.config.config_name }}
        id:                         get-artifacts
        run:                        ${{ matrix.config.base_command }} get-artifacts
        env:
          JAMULUS_BUILD_VERSION:    ${{ needs.create_release.outputs.build_version }}

      - name:                       Upload Artifact 1 to Job
        # Every build job has at least one artifact. Therefore, no `if` here.
        # If the artifact is missing, this should fail.
        uses:                       actions/upload-artifact@v2
        with:
          name:                     ${{ steps.get-artifacts.outputs.artifact_1 }}
          path:                     deploy/${{ steps.get-artifacts.outputs.artifact_1 }}
          retention-days:           31
          if-no-files-found:        error

      - name:                       Upload Artifact 2 to Job
        if:                         steps.get-artifacts.outputs.artifact_2
        uses:                       actions/upload-artifact@v2
        with:
          name:                     ${{ steps.get-artifacts.outputs.artifact_2 }}
          path:                     deploy/${{ steps.get-artifacts.outputs.artifact_2 }}
          retention-days:           31
          if-no-files-found:        error

      - name:                       Notarize macOS Release Build
        if:                         >-
                                    steps.build.outputs.macos_signed == 'true' &&
                                    needs.create_release.outputs.publish_to_release == 'true'
        id:                         notarize-macOS-app
        uses:                       devbotsxyz/xcode-notarize@v1
        with:
          product-path:             deploy/${{ steps.get-artifacts.outputs.artifact_1 }}
          primary-bundle-id:        live.koord.Koord-RT
          appstore-connect-username: ${{ secrets.NOTARIZATION_USERNAME }}
          appstore-connect-password: ${{ secrets.NOTARIZATION_PASSWORD }}
          verbose:                  true

      - name:                       Staple macOS Release Build
        if:                         >-
                                    steps.build.outputs.macos_signed == 'true' &&
                                    needs.create_release.outputs.publish_to_release == 'true'
        id:                         staple-macOS-app
        uses:                       devbotsxyz/xcode-staple@v1
        with:
          product-path:             deploy/${{ steps.get-artifacts.outputs.artifact_1 }}

      ## RELEASE PROCEDURE FOR:
      ## - macOS adhoc dmg
      ## - Windows exe (unsigned!)
      ## - Linux AppImage - direct DL only until AppImageHub drops requirement on Ubuntu 18.04 glibc<2.31
      ## Step: release artifact1 only to release, just for dmg,exe,appimage
      - name:                       Upload Artifact 1 to Release
        # Every build job has at least one artifact. Therefore, no `if artifact_1` condition here.
        # If the artifact is missing, this should fail.
        if:                         >-
                                    needs.create_release.outputs.publish_to_release == 'true' &&
                                    (matrix.config.target_os == 'macos' || 
                                    matrix.config.target_os == 'windows' ||
                                    matrix.config.target_os == 'linux')
        id:                         upload-release-asset1
        uses:                       actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN:             ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url:               ${{ needs.create_release.outputs.upload_url }}
          asset_path:               deploy/${{ steps.get-artifacts.outputs.artifact_1 }}
          asset_name:               ${{ steps.get-artifacts.outputs.artifact_1 }}
          asset_content_type:       application/octet-stream

      ## RELEASE PROCEDURE FOR:
      ## - macOS App Store - storesign pkg
      - name:                       Validate and Upload macOS Storesign Pkg
        if:                         >-
                                    steps.build.outputs.macos_signed == 'true' &&
                                    needs.create_release.outputs.publish_to_release == 'true'
        id:                         macos_validate_upload
        run:                        ${{ matrix.config.base_command }} validate_and_upload
        env:
          ARTIFACT_PATH:            deploy/${{ steps.get-artifacts.outputs.artifact_2 }}
          NOTARIZATION_USERNAME:    ${{ secrets.NOTARIZATION_USERNAME }}
          NOTARIZATION_PASSWORD:    ${{ secrets.NOTARIZATION_PASSWORD }}
          JAMULUS_BUILD_VERSION:    ${{ needs.create_release.outputs.build_version }}

      ## RELEASE PROCEDURE FOR:
      ## - iOS App Store - signed ipa
      - name:                       Validate and Upload iOS ipa file
        if:                         >-
                                    steps.build.outputs.ios_signed == 'true' &&
                                    needs.create_release.outputs.publish_to_release == 'true'
        id:                         ios_validate_upload
        run:                        ${{ matrix.config.base_command }} validate_and_upload
        env:
          ARTIFACT_PATH:            deploy/${{ steps.get-artifacts.outputs.artifact_1 }}
          NOTARIZATION_USERNAME:    ${{ secrets.NOTARIZATION_USERNAME }}
          NOTARIZATION_PASSWORD:    ${{ secrets.NOTARIZATION_PASSWORD }}
          JAMULUS_BUILD_VERSION:    ${{ needs.create_release.outputs.build_version }}

      ## RELEASE PROCEDURE FOR:
      ## - Android Play Store - aab
      ## Requirement: Service Account JSON setup:
      ## - Google Play Console -> Setup -> API Access -> Create/Link Google Cloud Project 
      ## - Google Cloud console -> IAM & Admin -> Service Accounts -> Create (Wizard). Then create JSON key and export/save
      - name:                       Publish arm, arm64 Android builds to Play Store
        if:                         >-
                                    needs.create_release.outputs.publish_to_release == 'true' &&
                                    matrix.config.target_os == 'android'
        id:                         publish_android
        uses:                       r0adkll/upload-google-play@v1
        with:
          serviceAccountJsonPlainText: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_JSON }}
          packageName:              live.koord.koordrt
          releaseFiles:             deploy/${{ steps.get-artifacts.outputs.artifact_1 }},deploy/${{ steps.get-artifacts.outputs.artifact_2 }}
          releaseName:              ${{ needs.create_release.outputs.build_version }}
          track:                    beta
          status:                   draft

      # ## RELEASE PROCEDURE FOR:
      # ## - Windows Store - msix
      # - name:                       Publish msix Windows build to Store
      #   if:                         >-
      #                               needs.create_release.outputs.publish_to_release == 'true' &&
      #                               matrix.config.target_os == 'windows'
      #   id:                         publish_windows
      #   uses:                       isaacrlevin/windows-store-action@1.0
      #   with:
      #     tenant-id:                ${{ secrets.AZURE_AD_TENANT_ID }}
      #     client-id:                ${{ secrets.AZURE_AD_APPLICATION_CLIENT_ID }}
      #     client-secret:            ${{ secrets.AZURE_AD_APPLICATION_SECRET }}
      #     app-id:                   ${{ secrets.WINDOWS_STORE_APP_ID }}
      #     package-path:             deploy/${{ steps.get-artifacts.outputs.artifact_2 }}

      ## All "Artifact 2" should be for Store upload only - do not put into Release
      ## ie macOS pkg, windows msix
      # - name:                       Upload Artifact 2 to Release
      #   if:                         >-
      #                               steps.get-artifacts.outputs.artifact_2 != '' &&
      #                               needs.create_release.outputs.publish_to_release == 'true'
      #   id:                         upload-release-asset2
      #   uses:                       actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN:             ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url:               ${{ needs.create_release.outputs.upload_url }}
      #     asset_path:               deploy/${{ steps.get-artifacts.outputs.artifact_2 }}
      #     asset_name:               ${{ steps.get-artifacts.outputs.artifact_2 }}
      #     asset_content_type:       application/octet-stream

      - name:                       Perform CodeQL Analysis
        if:                         matrix.config.run_codeql
        uses:                       github/codeql-action/analyze@v2
